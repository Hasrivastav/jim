Breaking the records

int max=Integer.MIN_VALUE;
    int min=Integer.MAX_VALUE;
    int countMax=0;
    int countMin=0;
    List<Integer> result=new ArrayList<Integer>();
    for(int i=0;i<scores.size();i++){
        
        if(scores.get(i)>max){
            max=scores.get(i);
            countMax++;
            
        }
         if(scores.get(i)<min){
            min=scores.get(i);
            countMin++;
            
        }
        
        
    }
    result.add(countMax-1);
    result.add(countMin-1);
  return result;
    }
    
    
    
   APPLE AND ORAANGE
      
      
      public static void countApplesAndOranges(int s, int t, int a, int b, List<Integer> apples, List<Integer> oranges) {
         
         
    int ca =0,co =0;
    
        for(int i = 0;i<apples.size();i++){
           
            if(a+apples.get(i)>=s && a+apples.get(i)<=t) ca++;
        }
        
        for(int i = 0;i<oranges.size();i++){
          
           if(b+oranges.get(i)>=s && b+oranges.get(i)<=t) co++;
        }
    
        System.out.println(ca);
        System.out.println(co);
    }
    
    
    
    
    KANGROOOO 
    
        public static String kangaroo(int x1, int v1, int x2, int v2) {
    // Write your code here
if(x2>x1&&v1>2)
{
    if((x2-x1)%(v1-v2)==0)
    {
        return "YES";
    }
    else return "NO";
}
return "NO";
}
    }
    
    
  
DIVISIBLE SUM PAIR
 
 public static int divisibleSumPairs(int n, int k, List<Integer> ar) {
  Write your code here
 int result=0;
for(int i=0;i<ar.size()-1;i++){
    int sum=0;
    for(int j=i+1;j<ar.size();j++){
        sum=ar.get(i)+ar.get(j);
       if(sum % k==0){
        result++;
    } 
    }
    
}
return result;
}


GRADING


public static List<Integer> gradingStudents(List<Integer> grades) {
        
    for(int i=0;i<grades.size();i++){
        if(grades.get(i)<38)
        {
           continue;
        }
        int nextMultiple = ((grades.get(i)/5)+1)*5;
       if(Math.abs(grades.get(i)-nextMultiple) < 3) {
           grades.set(i,nextMultiple);
       }
    }
    
  return grades;    
}
